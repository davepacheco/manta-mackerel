#!/usr/bin/env node
var fs = require('fs');
var path = require('path');
var url = require('url');
var getopt = require('posix-getopt');
var bunyan = require('bunyan');
var restify = require('restify');

var mackerel = require('../lib');

var LOG = bunyan.createLogger({
        name: path.basename(process.argv[1]),
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr,
        serializers: restify.bunyan.serializers
});


function parseOptions() {
        var option;
        var opts = {};
        var parser = new getopt.BasicParser('mrvf:', process.argv);
        var tmp;

        while ((option = parser.getopt()) !== undefined && !option.error) {
                switch (option.option) {
                case 'm':
                        opts.map = true;
                        break;

                case 'r':
                        opts.reduce = true;
                        break;

                case 'f':
                        opts.file = option.optarg;
                        break;

                case 'v':
                        // Allows us to set -vvv -> this little hackery
                        // just ensures that we're never < TRACE
                        LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                        if (LOG.level() <= bunyan.DEBUG)
                                LOG = LOG.child({src: true});
                        break;

                default:
                        process.exit(1);
                        break;
                }
        }

        if((opts.map && opts.reduce) || (!opts.map && !opts.reduce)) {
                usage('specify either map or reduce');
        }

        return (opts);
}

function usage(msg) {
        if (msg)
                console.error(msg);

        var str = 'usage: ' + path.basename(process.argv[1]);
        str += ' -m|-r [-v] [-f file path]';
        console.error(str);
        process.exit(1);
}

var _options = parseOptions();

var _input = _options.file ?
        fs.createReadStream(_options.file, {encoding: 'utf-8'}) :
        process.openStdin();

var _reader = _options.map ?
        mackerel.createMapReader({input: _input, log: LOG}) :
        mackerel.createReduceReader({input: _input, log: LOG});

_reader.on('error', function (err) {
        log.fatal(err, 'er');
});

_reader.on('end', function (aggr) {
        Object.keys(aggr || {}).forEach(function (k) {
                process.stdout.write(JSON.stringify(aggr[k]) + '\n');
        });
});
